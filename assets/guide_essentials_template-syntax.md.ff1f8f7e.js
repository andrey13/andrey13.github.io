import{c as s,e as a,t as l,d as n,a as e,o}from"./chunks/framework.302ed498.js";const t=e('<h1 id="template-syntax" tabindex="-1">Синтаксис шаблона <a class="header-anchor" href="#template-syntax" aria-label="Permalink to &quot;Синтаксис шаблона {#template-syntax}&quot;">​</a></h1><p>Vue использует синтаксис шаблона на основе HTML, который позволяет вам декларативно привязать визуализированный DOM к данным базового экземпляра компонента. Все шаблоны Vue представляют собой синтаксически правильный HTML, который может быть проанализирован браузерами, совместимыми со спецификациями, и парсерами HTML.</p><p>Под капотом Vue компилирует шаблоны в высокооптимизированный код JavaScript. В сочетании с системой реактивности Vue может разумно определять минимальное количество компонентов для повторного рендеринга и применять минимальное количество манипуляций с DOM при изменении состояния приложения.</p><p>Если вы знакомы с концепциями Virtual DOM и предпочитаете грубую мощь JavaScript, вы также можете <a href="/guide/extras/render-function.html">напрямую писать функции рендеринга</a> вместо шаблонов с дополнительной поддержкой JSX. Однако обратите внимание, что они не обладают таким же уровнем оптимизации времени компиляции, как шаблоны.</p><h2 id="text-interpolation" tabindex="-1">Интерполяция текста <a class="header-anchor" href="#text-interpolation" aria-label="Permalink to &quot;Интерполяция текста {#text-interpolation}&quot;">​</a></h2><p>Наиболее простой формой привязки данных является текстовая интерполяция с использованием &quot;усов&quot; синтаксис (двойные фигурные скобки):</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Message: </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> msg </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Тег mustache будет заменен на значение свойства <code>msg</code> <a href="/guide/essentials/reactivity-fundamentals.html#declaring-reactive-state">из соответствующего экземпляра компонента</a>. Он также будет обновляться при изменении свойства <code>msg</code>.</p><h2 id="raw-html" tabindex="-1">Сырой HTML <a class="header-anchor" href="#raw-html" aria-label="Permalink to &quot;Сырой HTML {#raw-html}&quot;">​</a></h2><p>Двойные усы интерпретируют данные как обычный текст, а не HTML. Для вывода реального HTML необходимо использовать директиву <a href="/api/built-in-directives.html#v-html"><code>v-html</code></a>:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Using text interpolation: </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> rawHtml </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Using v-html directive: </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-html</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">rawHtml</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div>',11),p=e('<p>Здесь мы сталкиваемся с чем-то новым. Атрибут <code>v-html</code>, который вы видите, называется <strong>директивой</strong>. Директивы имеют префикс <code>v-</code>, чтобы указать, что они являются специальными атрибутами, предоставляемыми Vue, и, как вы могли догадаться, они применяют особое реактивное поведение к визуализируемому DOM. Здесь мы в основном говорим: «Обновляйте внутренний HTML-код этого элемента с помощью свойства <code>rawHtml</code> в текущем активном экземпляре».</p><p>Содержимое <code>span</code> будет заменено значением свойства <code>rawHtml</code>, интерпретируемым как обычный HTML – привязки данных игнорируются. Обратите внимание, что вы не можете использовать <code>v-html</code> для создания частей шаблона, потому что Vue не является механизмом шаблонов на основе строк. Вместо этого компоненты предпочтительнее в качестве фундаментальной единицы для повторного использования и композиции пользовательского интерфейса.</p><div class="warning custom-block"><p class="custom-block-title">Предупреждение безопасности</p><p>Динамическое отображение произвольного HTML на вашем веб-сайте может быть очень опасным, поскольку оно может легко привести к <a href="https://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="noreferrer">XSS-уязвимостям</a>. Используйте <code>v-html</code> только для доверенного контента и <strong>никогда</strong> для контента, предоставленного пользователями.</p></div><h2 id="attribute-bindings" tabindex="-1">Привязки атрибутов <a class="header-anchor" href="#attribute-bindings" aria-label="Permalink to &quot;Привязки атрибутов {#attribute-bindings}&quot;">​</a></h2><p>Усы нельзя использовать внутри атрибутов HTML. Вместо этого используйте <a href="/api/built-in-directives.html#v-bind">директиву <code>v-bind</code></a>:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">dynamicId</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Директива <code>v-bind</code> предписывает Vue синхронизировать атрибут <code>id</code> элемента со свойством <code>dynamicId</code> компонента. Если связанное значение равно <code>null</code> или <code>undefined</code>, атрибут будет удален из визуализируемого элемента.</p><h3 id="shorthand" tabindex="-1">Сокращение <a class="header-anchor" href="#shorthand" aria-label="Permalink to &quot;Сокращение {#shorthand}&quot;">​</a></h3><p>Поскольку <code>v-bind</code> так часто используется, у него есть специальный сокращённый синтаксис:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">dynamicId</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Атрибуты, начинающиеся с <code>:</code>, могут немного отличаться от обычного HTML, но на самом деле это допустимый символ для имен атрибутов, и все браузеры, поддерживающие Vue, могут правильно его анализировать. Кроме того, они не отображаются в финальной отрендеренной разметке. Сокращенный синтаксис необязателен, но вы, вероятно, оцените его, когда узнаете больше о его использовании позже.</p><blockquote><p>В остальной части руководства мы будем использовать сокращенный синтаксис в примерах кода, так как это наиболее распространенное использование для разработчиков Vue.</p></blockquote><h3 id="boolean-attributes" tabindex="-1">Логические атрибуты <a class="header-anchor" href="#boolean-attributes" aria-label="Permalink to &quot;Логические атрибуты {#boolean-attributes}&quot;">​</a></h3><p><a href="https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#boolean-attributes" target="_blank" rel="noreferrer">Булевы атрибуты</a> — это атрибуты, которые могут указывать значения true/false своим присутствием в элементе. Например, <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled" target="_blank" rel="noreferrer"><code>disabled</code></a> — один из наиболее часто используемых логических атрибутов.</p><p><code>v-bind</code> в этом случае работает немного иначе:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">disabled</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">isButtonDisabled</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Button</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Атрибут <code>disabled</code> будет включен, если <code>isButtonDisabled</code> имеет [истинное значение] (<a href="https://developer.mozilla.org/en-US/docs/Glossary/Truthy" target="_blank" rel="noreferrer">https://developer.mozilla.org/en-US/docs/Glossary/Truthy</a>). Он также будет включен, если значение представляет собой пустую строку, сохраняя согласованность с <code>&lt;button disabled=&quot;&quot;&gt;</code>. Для других <a href="https://developer.mozilla.org/en-US/docs/Glossary/Falsy" target="_blank" rel="noreferrer">ложных значений</a> атрибут будет опущен.</p><h3 id="dynamically-binding-multiple-attributes" tabindex="-1">Динамическое связывание нескольких атрибутов <a class="header-anchor" href="#dynamically-binding-multiple-attributes" aria-label="Permalink to &quot;Динамическое связывание нескольких атрибутов {#dynamically-binding-multiple-attributes}&quot;">​</a></h3><p>Если у вас есть объект JavaScript, представляющий несколько атрибутов, который выглядит следующим образом:</p><div class="composition-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> objectOfAttrs </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">id</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">container</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">class</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">wrapper</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div><div class="options-api"><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">data</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    objectOfAttrs</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      id</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">container</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">      class</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">wrapper</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div><p>Вы можете привязать их к одному элементу, используя <code>v-bind</code> без аргумента:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">objectOfAttrs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><h2 id="using-javascript-expressions" tabindex="-1">Использование выражений JavaScript <a class="header-anchor" href="#using-javascript-expressions" aria-label="Permalink to &quot;Использование выражений JavaScript {#using-javascript-expressions}&quot;">​</a></h2><p>До сих пор мы привязывали только простые ключи свойств в наших шаблонах. Но на самом деле Vue поддерживает всю мощь выражений JavaScript во всех привязках данных:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> number </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> ok </span><span style="color:#89DDFF;">?</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">YES</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">NO</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> message</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">split</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">reverse</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">) </span><span style="color:#89DDFF;">}}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">id</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;`</span><span style="color:#C3E88D;">list-</span><span style="color:#89DDFF;">${</span><span style="color:#A6ACCD;">id</span><span style="color:#89DDFF;">}`&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">div</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Эти выражения будут оцениваться как JavaScript в области данных текущего экземпляра компонента.</p><p>В шаблонах Vue выражения JavaScript могут использоваться в следующих позициях:</p><ul><li>Внутренние интерполяции текста (усы)</li><li>В значении атрибута любых директив Vue (специальные атрибуты, начинающиеся с <code>v-</code>)</li></ul><h3 id="expressions-only" tabindex="-1">Только выражения <a class="header-anchor" href="#expressions-only" aria-label="Permalink to &quot;Только выражения {#expressions-only}&quot;">​</a></h3><p>Каждая привязка может содержать только <strong>одно выражение</strong>. Выражение — это фрагмент кода, который можно преобразовать в значение. Простая проверка — можно ли его использовать после <code>return</code>.</p><p>Следовательно, следующее <strong>НЕ</strong> будет работать:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- это утверждение, а не выражение: --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">var</span><span style="color:#A6ACCD;"> a </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- управление потоком тоже не будет работать, используйте троичные выражения --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#A6ACCD;"> (ok) </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">message</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}}</span></span></code></pre></div><h3 id="calling-functions" tabindex="-1">Вызов функций <a class="header-anchor" href="#calling-functions" aria-label="Permalink to &quot;Вызов функций {#calling-functions}&quot;">​</a></h3><p>Внутри выражения привязки можно вызвать метод, открытый компонентом:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">time</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">title</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#82AAFF;">toTitleDate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">date</span><span style="color:#89DDFF;">)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">datetime</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">date</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{{</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">formatDate</span><span style="color:#A6ACCD;">(date) </span><span style="color:#89DDFF;">}}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">time</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Функции, вызываемые внутри выражений привязки, будут вызываться каждый раз при обновлении компонента, поэтому они <strong>не</strong> должны иметь никаких побочных эффектов, таких как изменение данных или запуск асинхронных операций.</p></div><h3 id="restricted-globals-access" tabindex="-1">Ограниченный доступ к глобальным переменным <a class="header-anchor" href="#restricted-globals-access" aria-label="Permalink to &quot;Ограниченный доступ к глобальным переменным {#restricted-globals-access}&quot;">​</a></h3><p>Выражения шаблонов изолированы и имеют доступ только к <a href="https://github.com/vuejs/core/blob/main/packages/shared/src/globalsAllowList.ts#L3" target="_blank" rel="noreferrer">ограниченному списку глобальных переменных</a>. В списке представлены часто используемые встроенные глобальные переменные, такие как «Math» и «Date».</p><p>Глобальные значения, не включенные в список явно, например присоединенные пользователем свойства окна, не будут доступны в выражениях шаблона. Однако вы можете явно определить дополнительные глобальные переменные для всех выражений Vue, добавив их в <a href="/api/application.html#app-config-globalproperties"><code>app.config.globalProperties</code></a>.</p><h2 id="directives" tabindex="-1">Директивы <a class="header-anchor" href="#directives" aria-label="Permalink to &quot;Директивы {#directives}&quot;">​</a></h2><p>Директивы — это специальные атрибуты с префиксом <code>v-</code>. Vue предоставляет ряд <a href="/api/built-in-directives.html">встроенных директив</a>, включая <code>v-html</code> и <code>v-bind</code>, которые мы представили выше.</p><p>Ожидается, что значения атрибута директивы будут отдельными выражениями JavaScript (за исключением <code>v-for</code>, <code>v-on</code> и <code>v-slot</code>, которые будут обсуждаться в соответствующих разделах позже). Задача директивы — реактивно применять обновления к DOM при изменении значения ее выражения. Возьмите <a href="/api/built-in-directives.html#v-if"><code>v-if</code></a> в качестве примера:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">seen</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">Now you see me</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Здесь директива <code>v-if</code> удалит/вставит элемент <code>&lt;p&gt;</code> в зависимости от истинности значения выражения <code>seen</code>.</p><h3 id="arguments" tabindex="-1">Аргументы <a class="header-anchor" href="#arguments" aria-label="Permalink to &quot;Аргументы {#arguments}&quot;">​</a></h3><p>Некоторые директивы могут принимать «аргумент», обозначаемый двоеточием после имени директивы. Например, директива <code>v-bind</code> используется для реактивного обновления атрибута HTML:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ... </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- shorthand --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">href</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ... </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Здесь <code>href</code> — это аргумент, который указывает директиве <code>v-bind</code> связать атрибут <code>href</code> элемента со значением выражения <code>url</code>. В сокращении все, что находится перед аргументом (например, <code>v-bind:</code>), сжимается в один символ <code>:</code>.</p><p>Другим примером является директива <code>v-on</code>, которая прослушивает события DOM:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-on</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">doSomething</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ... </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- shorthand --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">doSomething</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ... </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Здесь аргумент — это имя события для прослушивания: <code>click</code>. <code>v-on</code> имеет соответствующее сокращение, а именно символ <code>@</code>. Мы также поговорим об обработке событий более подробно.</p><h3 id="dynamic-arguments" tabindex="-1">Динамические аргументы <a class="header-anchor" href="#dynamic-arguments" aria-label="Permalink to &quot;Динамические аргументы {#dynamic-arguments}&quot;">​</a></h3><p>Также можно использовать выражение JavaScript в аргументе директивы, заключив его в квадратные скобки:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!--</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">Обратите внимание, что существуют некоторые ограничения на выражение аргумента,</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">как объяснено в разделах «Динамические ограничения значения аргумента» и «Динамические ограничения синтаксиса аргумента» ниже.</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">--&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-bind:</span><span style="color:#89DDFF;">[</span><span style="color:#C792EA;">attributeName</span><span style="color:#89DDFF;">]=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ... </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- shorthand --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> :[</span><span style="color:#C792EA;">attributeName</span><span style="color:#89DDFF;">]=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">url</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ... </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Здесь <code>attributeName</code> будет динамически оцениваться как выражение JavaScript, и его оцененное значение будет использоваться как окончательное значение для аргумента. Например, если экземпляр вашего компонента имеет свойство данных <code>attributeName</code>, значение которого равно <code>&quot;href&quot;</code>, то эта привязка будет эквивалентна <code>v-bind:href</code>.</p><p>Точно так же вы можете использовать динамические аргументы для привязки обработчика к имени динамического события:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-on:</span><span style="color:#89DDFF;">[</span><span style="color:#C792EA;">eventName</span><span style="color:#89DDFF;">]=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">doSomething</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ... </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- shorthand --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> @[</span><span style="color:#C792EA;">eventName</span><span style="color:#89DDFF;">]=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">doSomething</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>В этом примере, когда значение <code>eventName</code> равно <code>&quot;focus&quot;</code>, <code>v-on:[eventName]</code> будет эквивалентно <code>v-on:focus</code>.</p><h4 id="dynamic-argument-value-constraints" tabindex="-1">Динамические ограничения значения аргумента <a class="header-anchor" href="#dynamic-argument-value-constraints" aria-label="Permalink to &quot;Динамические ограничения значения аргумента {#dynamic-argument-value-constraints}&quot;">​</a></h4><p>Ожидается, что динамические аргументы будут оцениваться как строка, за исключением <code>null</code>. Специальное значение <code>null</code> можно использовать для явного удаления привязки. Любое другое нестроковое значение вызовет предупреждение.</p><h4 id="dynamic-argument-syntax-constraints" tabindex="-1">Синтаксические ограничения динамического аргумента <a class="header-anchor" href="#dynamic-argument-syntax-constraints" aria-label="Permalink to &quot;Синтаксические ограничения динамического аргумента {#dynamic-argument-syntax-constraints}&quot;">​</a></h4><p>Выражения динамических аргументов имеют некоторые синтаксические ограничения, поскольку некоторые символы, такие как пробелы и кавычки, недопустимы в именах атрибутов HTML. Например, следующее неверно:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">&lt;!-- This will trigger a compiler warning. --&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> :[</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;"> + </span><span style="color:#C792EA;">bar</span><span style="color:#89DDFF;">]=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ... </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Если вам нужно передать сложный динамический аргумент, возможно, лучше использовать <a href="./computed.html">вычисляемое свойство</a>, которое мы вскоре рассмотрим.</p><p>При использовании шаблонов в DOM (шаблоны, написанные непосредственно в HTML-файле) вам также следует избегать именования ключей с использованием символов верхнего регистра, поскольку браузеры будут переводить имена атрибутов в нижний регистр:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;"> :[</span><span style="color:#C792EA;">someAttr</span><span style="color:#89DDFF;">]=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> ... </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">a</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Вышеприведенное будет преобразовано в <code>:[someattr]</code> в шаблонах DOM. Если ваш компонент имеет свойство <code>someAttr</code> вместо <code>someattr</code>, ваш код не будет работать. Шаблоны внутри однофайловых компонентов <strong>не</strong> подпадают под это ограничение.</p><h3 id="modifiers" tabindex="-1">Модификаторы <a class="header-anchor" href="#modifiers" aria-label="Permalink to &quot;Модификаторы {#modifiers}&quot;">​</a></h3><p>Модификаторы — это специальные постфиксы, обозначаемые точкой, которые указывают на то, что директива должна быть связана каким-то особым образом. Например, модификатор <code>.prevent</code> указывает директиве <code>v-on</code> вызывать <code>event.preventDefault()</code> при инициированном событии:</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;"> @</span><span style="color:#C792EA;">submit</span><span style="color:#89DDFF;">.</span><span style="color:#C792EA;">prevent</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">onSubmit</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">...</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">form</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><p>Другие примеры модификаторов вы увидите позже, <a href="./event-handling.html#event-modifiers">для <code>v-on</code></a> и <a href="./forms.html#modifiers">для <code>v-model</code></a>, когда мы рассмотрим эти функции.</p><p>И, наконец, вот полный визуализированный синтаксис директивы:</p><p><img src="/assets/directive.69c37117.png" alt="граф синтаксиса директивы"></p>',74),c=JSON.parse('{"title":"Синтаксис шаблона","description":"","frontmatter":{},"headers":[{"level":2,"title":"Интерполяция текста","slug":"text-interpolation","link":"#text-interpolation","children":[]},{"level":2,"title":"Сырой HTML","slug":"raw-html","link":"#raw-html","children":[]},{"level":2,"title":"Привязки атрибутов","slug":"attribute-bindings","link":"#attribute-bindings","children":[{"level":3,"title":"Сокращение","slug":"shorthand","link":"#shorthand","children":[]},{"level":3,"title":"Логические атрибуты","slug":"boolean-attributes","link":"#boolean-attributes","children":[]},{"level":3,"title":"Динамическое связывание нескольких атрибутов","slug":"dynamically-binding-multiple-attributes","link":"#dynamically-binding-multiple-attributes","children":[]}]},{"level":2,"title":"Использование выражений JavaScript","slug":"using-javascript-expressions","link":"#using-javascript-expressions","children":[{"level":3,"title":"Только выражения","slug":"expressions-only","link":"#expressions-only","children":[]},{"level":3,"title":"Вызов функций","slug":"calling-functions","link":"#calling-functions","children":[]},{"level":3,"title":"Ограниченный доступ к глобальным переменным","slug":"restricted-globals-access","link":"#restricted-globals-access","children":[]}]},{"level":2,"title":"Директивы","slug":"directives","link":"#directives","children":[{"level":3,"title":"Аргументы","slug":"arguments","link":"#arguments","children":[]},{"level":3,"title":"Динамические аргументы","slug":"dynamic-arguments","link":"#dynamic-arguments","children":[]},{"level":3,"title":"Модификаторы","slug":"modifiers","link":"#modifiers","children":[]}]}],"relativePath":"guide/essentials/template-syntax.md","filePath":"guide/essentials/template-syntax.md"}'),r={name:"guide/essentials/template-syntax.md"},i=Object.assign(r,{setup(e){const c='<span style="color: red">This should be red.</span>';return(e,r)=>(o(),s("div",null,[t,a("div",{class:"demo"},[a("p",null,"Using text interpolation: "+l(c)),a("p",null,[n("Using v-html directive: "),a("span",{innerHTML:c})])]),p]))}});export{c as __pageData,i as default};
